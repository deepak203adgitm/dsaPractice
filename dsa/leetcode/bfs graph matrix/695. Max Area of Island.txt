695. Max Area of Island

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0

===================================================================================================

class Solution {
public:
     void dfs(vector<vector<int>>& grid, int i, int j, int m, int n,int &count )
    {
        if(i<0 or j<0 or i>=m or j>=n or grid[i][j]==0){
        
            return;
        }
        
     
        
        grid[i][j] = 0;
         count++;
        
        dfs(grid,i+1,j,m,n,count);
        
        dfs(grid,i-1,j,m,n,count);
        
        dfs(grid,i,j+1,m,n,count);
        
        dfs(grid,i,j-1,m,n,count);
        
        
        
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
         int count =0;
        int ans = 0;
        for(int i =0;i<grid.size();i++)
        {
            for(int j =0;j<grid[0].size();j++)
            {
                if(grid[i][j]==1)
                dfs(grid,i,j,grid.size(),grid[0].size(),count);
                ans = max(ans,count);
                count =0;
            }
        }
        
        return ans;
      
    }
};