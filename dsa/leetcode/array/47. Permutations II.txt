47. Permutations II
Medium

3119

80

Add to List

Share
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

class Solution {
    void helper(unordered_map<int, int>& bar, vector<int>& temp, vector<vector<int>>& res, int n){
        if(temp.size() == n){
            res.push_back(temp);
            return ;
        }
        for(auto &i : bar){
            if(i.second <= 0) continue;
            i.second --;
            temp.push_back(i.first);
            helper(bar, temp, res, n);
            temp.pop_back();
            i.second ++;
        }
    }
    
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        unordered_map<int, int> bar;
        for(int i : nums){
            bar[i] ++;
        }
        vector<int> temp;
        helper(bar, temp, res, nums.size());
        return res;
    }
};