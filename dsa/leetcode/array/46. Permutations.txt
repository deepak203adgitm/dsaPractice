46. Permutations


Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

============================================================================================
class Solution {
public:
    
       void helper(vector<int>& candidates, int i, vector<vector<int>> &ans, vector<int> &v)
        
    {
          if(v.size()==candidates.size())
    
          {  ans.push_back(v);
          }
            
    
        else{
        for(int j =0;j<candidates.size();j++)
            {
            if( find(v.begin(),v.end(),candidates[j])!=v.end()) continue;
                v.push_back(candidates[j]);
                helper(candidates,j+1,ans,v);
                v.pop_back();
            }
        }
       }
    
    vector<vector<int>> permute(vector<int>& nums) {
         vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        vector<int>v;
        helper(nums,0,ans,v);
        return ans;
    }
};