221. Maximal Square
Medium

4786

114

Add to List

Share
Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.
Accepted
368,455
Submissions
916,866
============================================================================================


class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        
      if (matrix.empty()) {
            return 0;
        }
        int m = matrix.size(), n = matrix[0].size(), sz = 0;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        
        int result =0;
        
        for(int i = 0; i<matrix.size(); i++)
        {
            for(int j = 0; j<matrix[0].size(); j++)
            {
                if(!i or !j or matrix[i][j]=='0')
                    dp[i][j] =matrix[i][j]-'0';
                else
                    dp[i][j] = min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]))+1;
                
              // cout<<dp[i][j]<<" ";
                
               result = max(dp[i][j],result);
            }
            
        // cout<<endl;
        }
        
       // cout<<result;
        return (result)*(result);
    
        
    }
};
