1593. Split a String Into the Max Number of Unique Substrings
Medium
Given a string s, return the maximum number of unique substrings that the given string can be split into.

You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "ababccc"
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.
Example 2:

Input: s = "aba"
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].
Example 3:

Input: s = "aa"
Output: 1
Explanation: It is impossible to split the string any further.


class Solution {
public:
    int  dfs (string s,int start, unordered_set<string>&us)
    {
        int res=0;
        for(int i =start;i<s.size();i++)
        {
            string ss= s.substr(start,i-start+1);
            if(us.count(ss)) continue;
           // cout<<ss<<endl;
            us.insert(ss);
            
            res = max(res,1+dfs(s,i+1,us));
            us.erase(ss);
        }
        
        return res;
        
    }
    
    
    int maxUniqueSplit(string s) {
        unordered_set<string>us;
       // int mx =0;
      int mx=  dfs(s,0,us);
        //for(auto x: us) cout<<x<<" ";
        
        return mx;
        
    }
};



 