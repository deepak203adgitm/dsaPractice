207. Course Schedule


Share
There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

==================================================================================================
class Solution {
public:
  bool topologicalSort(int n , vector<vector<int>>v)
{
    vector<int> in_degree(n, 0);
    unordered_map<int,vector<int> >um;
        
    for(auto x: v)
    {
        um[x[1]].push_back(x[0]);
        in_degree[x[0]]++;
    }
  
   
    queue<int> q;
    for (int i = 0; i < in_degree.size(); i++)
        if (in_degree[i] == 0)
            q.push(i);
  
    int cnt = 0;
  
    
    vector<int> top_order;
  

    while (!q.empty()) {
       
        int u = q.front();
        q.pop();
        top_order.push_back(u);
  
       
        for(auto x: um[u])
        {
            if(--in_degree[x]==0) q.push(x);
        }
  
        cnt++;
    }
  
   
  return (top_order.size()==n);
   
}
    
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
         return topologicalSort( numCourses,prerequisites);
        
    }
};