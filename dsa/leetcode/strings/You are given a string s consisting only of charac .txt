You are given a string s consisting only of characters 'a' and 'b'​​​​.

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.

 

Example 1:

Input: s = "aababbab"
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or
Delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").
Example 2:

Input: s = "bbaaaaabb"
Output: 2
Explanation: The only solution is to delete the first two characters.


============================================================================
class Solution {
public:
    int minimumDeletions(string s) {
        
        
        stack<char>c;
        int res =0;
        
        for(int i = s.size()-1;i>=0;i--)
        {
            
            if(!c.empty() and  c.top()<s[i])
            {
                res++;
                c.pop();
                
            }
                
                
            else c.push(s[i]);
        }
        
        
        return res;
        
        
    }
};


==========================================================================================
class Solution {
public:
    int minimumDeletions(string s) 
    {
        int as = 0, bs = 0;
        for( const char& c : s )
            if( c == 'a' )
                ++as;
        
        int del = as;
        for( const char& c : s )
        {
            if( c == 'b' )
                ++bs;
            else
                --as;
            
            del = min( del, (as+bs) );
        }
        return del;
    }
};

======================================================================================