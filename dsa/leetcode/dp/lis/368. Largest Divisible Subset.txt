368. Largest Divisible Subset
Medium

1962

93

Add to List

Share
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]

==================================================================================

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        //time complexity of my approach is O(n^2)
        int n = nums.size();
        if(n == 0 || n == 1)    return nums;
        
        sort(nums.begin(),nums.end());
        
        vector<int> dp(n,1);
        int maxEle = INT_MIN;
        
        for(int i=1;i<n;i++){
            for(int j=i-1;j>=0;j--){
                if(nums[i]%nums[j] == 0){
                    int t = 1 + dp[j];
                    if(t > dp[i])   dp[i] = t;
                }
            }
            if(dp[i] > maxEle)  maxEle = dp[i];
            
            
        }
        
        cout<<maxEle<<endl;
        
        for(auto x: dp) cout<<x<<" ";
        
        vector<int> v;
        int prev =0;
        for(int i=n-1;i>=0;i--){
            if(dp[i] == maxEle and prev%nums[i]==0){
                v.push_back(nums[i]);
                maxEle--;
                prev = v.back();
            }
        }
        
        
        
        return v;
    }
};