127. Word Ladder
Hard

5251

1440

Add to List

Share
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
Accepted
594,800
Submissions
1,818,682





=============================================================================================
class Solution {
public:
    void helper( unordered_map<string,bool>&um,string s, queue<string>&q)
    {
        for(int i =0;i<s.size();i++)
        {
            for(int j =0;j<26;j++)
            {
                string k = s;
                k[i] = 'a'+j;
               // cout<<k<<" ";
                
                if(um.count(k) and !um[k])
                {
                    um[k] = true;
                    q.push(k);
                }
            }
        }
        
    }
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
    if(find(wordList.begin(),wordList.end(), endWord)== wordList.end())
        return 0;
        
        queue<string>q;
        unordered_map<string,bool>um;
        
        for(auto x: wordList)
        {
            um[x] = false;
            
        }
        
        q.push(beginWord);
        
        um[beginWord] = true;
        int length =1;
        
        while(!q.empty())
        {
            
            int size = q.size();
            for(int i =0;i<size;i++){
            auto k = q.front();
            
            q.pop();
            if(k==endWord)
                return length;
            
            helper(um,k,q);
            }
            
            length++;
           
        }
        
        
        return 0;
        
        
    }
};