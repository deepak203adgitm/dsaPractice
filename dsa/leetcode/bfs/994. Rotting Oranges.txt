994. Rotting Oranges
Medium

3570

218

Add to List

Share
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

 ===============================================================================================
 class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        queue< pair<int,int>  >q;
        int total =0;
        
        
        for(int i =0;i<grid.size();i++)
        {
            for(int j =0;j< grid[0].size();j++)
            {
                if(grid[i][j]==2)
                    q.push({i,j});
                 if( grid[i][j]) total++;
                    
            }
        }
        
    
        int time=0, rotten =0;
        
        if(total==0)
            return 0;
        
        while(!q.empty())
        {
           int size = q.size(); 
            rotten+= size;
            
            if(rotten == total)return time;
            
            time++;
            
            for(int i =0;i<size;i++)
            {
                
             auto x = q.front();
                q.pop();
                if(x.first-1>=0 and grid[x.first-1][x.second]==1)
                {
                    grid[x.first-1][x.second] =2;
                    q.push({x.first-1,x.second});
                }
                
                 if(x.second-1>=0 and grid[x.first][x.second-1]==1)
                {
                    grid[x.first][x.second-1] =2;
                    q.push({x.first,x.second-1});
                }
                
                 if(x.second+1<grid[0].size()and grid[x.first][x.second+1]==1)
                {
                    grid[x.first][x.second+1] =2;
                    q.push({x.first,x.second+1});
                }
                 if(x.first+1< grid.size() and grid[x.first+1][x.second]==1)
                {
                    grid[x.first+1][x.second] =2;
                    q.push({x.first+1,x.second});
                }
            }
        }
        
        
        return -1;
    }
};